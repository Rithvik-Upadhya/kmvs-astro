---
import { headerQuery } from '../../../variables';
import singleGQL from '../../api/singleGQL';

const headerData = await singleGQL('headerMenu', headerQuery);
const {
	attributes: { submenus },
} = headerData;
---

<header>
	<nav aria-label='Main Navigation'>
		<ul class='h-nav'>
			{
				submenus.map((submenu, index) => {
					const hasMenuItems = submenu.menuItems.length > 0;
					return (
						<>
							<li class:list={[{ 'has-submenu': hasMenuItems }]}>
								<button
									class='submenu-btn'
									aria-controls={`submenu-${index}`}
									aria-expanded='false'>
									{submenu.title}
								</button>
								{hasMenuItems && (
									<ul class='submenu' id={`submenu-${index}`}>
										{submenu.menuItems.map(menuItem => (
											<li class='menu-item'>
												<a href={menuItem.link}>
													{menuItem.text}
												</a>
											</li>
										))}
									</ul>
								)}
							</li>
							{index === 1 && (
								<li class='h-logo'>
									<a href='/'>
										<img
											src='/images/header/logo.png'
											width='120'
											alt='Home Page'
											loading='eager'
										/>
									</a>
								</li>
							)}
						</>
					);
				})
			}
		</ul>
	</nav>
</header>

<style lang='less'>
	header {
		width: 100%;
		nav {
			width: 100%;
			display: flex;
			flex-direction: row;
			align-items: center;
			justify-content: center;
			margin: 30px 0;
			ul {
				list-style: none;
				padding: 0;
				margin: 0;
			}
			a,
			.submenu-btn {
				font-size: 1.2em;
				font-weight: 500;
				text-decoration: none;
				color: var(--accentC1);
				background-color: transparent;
				border: none;
				cursor: pointer;
			}
			.h-logo {
				margin: 0 30px;
				a {
					display: block;
					img {
						width: 120px;
					}
				}
			}
			> ul.h-nav {
				display: flex;
				align-items: center;
				justify-content: center;
				max-width: 800px;
				width: 100%;
				> li:not(.h-logo) {
					> .submenu-btn {
						display: block;
						padding: 15px 0;
					}
				}
				// pseudo element for decorative flower
				> li:first-child,
				> li:nth-child(4) {
					margin-right: 76px;
					position: relative;
					&:after {
						pointer-events: none;
						position: absolute;
						content: '';
						width: 16px;
						height: 16px;
						right: -46px;
						background-image: url(/images/decor/flower.png);
						background-size: contain;
						filter: var(--accentC3Filter);
						top: 0;
						bottom: 0;
						margin: auto 0;
					}
				}
				// submenu styling
				> li.has-submenu {
					position: relative;
					> ul.submenu {
						display: none;
						position: absolute;
						max-width: 240px;
						width: max-content;
						background-color: var(--primaryC);
						z-index: 1000;
						border-radius: var(--bdRadius2);
						overflow: hidden;
						box-shadow: var(--shadow1);
						font-size: 0.9em;
						> li {
							> a {
								padding: 12px 12px;
								width: 100%;
								display: block;
								&:hover,
								&:focus {
									background-color: var(--darkTint);
								}
							}
						}
					}
					// reveal submenu on hover or focus
					&:hover,
					&.open,
					&:focus-within {
						> ul.submenu {
							display: block;
						}
					}
				}
			}
		}
	}
</style>
