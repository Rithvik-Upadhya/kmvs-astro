---
export interface Props {
	logo: string;
}

const { logo } = Astro.props;

import { headerQuery } from '../../../variables';
import singleGQL from '../../api/singleGQL';

const headerData = await singleGQL('headerMenu', headerQuery);
const {
	attributes: { submenus },
} = headerData;
---

<header>
	<div class='nav-wrapper'>
		<nav aria-label='Main Navigation'>
			<ul class='h-nav'>
				{
					submenus.map((submenu, index) => {
						const hasMenuItems = submenu.menuItems.length > 0;
						return (
							<>
								<li
									class:list={[
										{ 'has-submenu': hasMenuItems },
									]}>
									<button
										class='submenu-btn'
										aria-controls={`submenu-${index}`}
										aria-expanded='false'>
										{submenu.title}
									</button>
									{hasMenuItems && (
										<ul
											class='submenu'
											id={`submenu-${index}`}>
											{submenu.menuItems.map(menuItem => (
												<li class='menu-item'>
													<a href={menuItem.link}>
														{menuItem.text}
													</a>
												</li>
											))}
										</ul>
									)}
								</li>
								{index === 1 && (
									<li class='h-logo'>
										<a href='/'>
											<img
												src={logo}
												width='120'
												alt='Home Page'
												loading='eager'
											/>
										</a>
									</li>
								)}
							</>
						);
					})
				}
			</ul>
		</nav>
	</div>
</header>

<script>
	// scroll button functions //
	document.addEventListener('DOMContentLoaded', event => {
		// get all the submenu buttons
		const submenuButtons = document.querySelectorAll('.submenu-btn');

		// loop through each button
		submenuButtons.forEach(button => {
			// get the parent list item
			const parent = button.parentElement;

			// add an event listener for mouse hover
			button.addEventListener('mouseenter', function () {
				this.setAttribute('aria-expanded', 'true');
				parent.classList.add('open');
			});

			// add an event listener for focus
			button.addEventListener('click', function () {
				this.setAttribute('aria-expanded', 'true');
				parent.classList.add('open');
			});

			// add an event listener for mouse leaving
			parent.addEventListener('mouseleave', function () {
				button.setAttribute('aria-expanded', 'false');
				this.classList.remove('open');
			});

			// add an event listener for loss of focus
			parent.addEventListener('focusout', function () {
				// delay the changing of attribute to check if focus shifted within the submenu or outside
				setTimeout(function () {
					if (!parent.contains(document.activeElement)) {
						button.setAttribute('aria-expanded', 'false');
						parent.classList.remove('open');
					}
				}, 0);
			});
		});
	});
</script>

<script>
	// sticky header function //
	let lastScrollTop = 0;
	// set header height as css variable on load
	document.addEventListener('DOMContentLoaded', event => {
		const header = document.querySelector('header'),
			headerHeight = header.offsetHeight;
		header.style.setProperty('--headerH', `${headerHeight}px`);
	});
	// set classes on header based on scroll position and direction
	window.addEventListener('scroll', () => {
		let scrollTop = window.scrollY;
		const header = document.querySelector('header');

		scrollTop > 0
			? header.classList.add('scrolling')
			: header.classList.remove('scrolling');

		scrollTop > 300
			? header.classList.add('auto-hide')
			: header.classList.remove('auto-hide');

		if (scrollTop > lastScrollTop && scrollTop > 300) {
			header.classList.remove('up');
			header.classList.add('down');
		} else if (scrollTop < lastScrollTop && scrollTop > 300) {
			header.classList.remove('down');
			header.classList.add('up');
		} else {
			header.classList.remove('up');
			header.classList.remove('down');
		}
		lastScrollTop = scrollTop;
	});
</script>

<style lang='less'>
	@import '../../styles/variables.less';
	header {
		&.scrolling {
			.nav-wrapper {
				position: fixed;
				top: 0;
				left: 0;
				right: 0;
				margin: 0 auto;
				max-width: 1400px;
				width: 100%;
				background-color: var(--primaryC);
				z-index: 1000;
				border-bottom: 2px solid var(--darkTint);
				nav {
					padding: 10px 0;
				}
				.h-logo {
					img {
						width: 80px;
						transition: 0.3s ease;
					}
				}
			}
		}
		&.auto-hide.down:not(:hover):not(:focus-within) {
			.nav-wrapper {
				transform: translateY(calc(-1 * var(--headerH)));
			}
		}
		&.auto-hide.up {
			.nav-wrapper {
				transform: translateY(0);
				transition: 0.5s ease 0s;
			}
		}
	}
	header {
		width: 100%;
		height: 150px;

		.nav-wrapper {
			border-bottom: 2px solid transparent;
			transition:
				border-bottom 0.2s ease,
				transform 0.5s ease 2s;
			nav {
				width: 100%;
				display: flex;
				flex-direction: row;
				align-items: center;
				justify-content: center;
				padding: 20px 0;
				transition: padding 0.3s ease;
				ul {
					list-style: none;
					padding: 0;
					margin: 0;
				}
				a,
				.submenu-btn {
					font-size: 1.2em;
					font-weight: 500;
					text-decoration: none;
					color: var(--accentC1);
					background-color: transparent;
					border: none;
					cursor: pointer;
				}
				.h-logo {
					margin: 0 30px;
					a {
						display: block;
						img {
							width: 120px;
							transition: 0.3s ease;
							@media @s-nd {
								width: 80px;
							}
						}
					}
				}
				> ul.h-nav {
					display: flex;
					align-items: center;
					justify-content: center;
					max-width: 800px;
					width: 100%;
					> li:not(.h-logo) {
						> .submenu-btn {
							display: block;
							padding: 15px 0;
						}
					}
					// pseudo element for decorative flower
					> li:first-child,
					> li:nth-child(4) {
						margin-right: 76px;
						position: relative;
						&:after {
							pointer-events: none;
							position: absolute;
							content: '';
							width: 16px;
							height: 16px;
							right: -46px;
							background-image: url(/images/decor/flower.png);
							background-size: contain;
							filter: var(--accentC3Filter);
							top: 0;
							bottom: 0;
							margin: auto 0;
						}
					}
					// submenu styling
					> li.has-submenu {
						position: relative;
						@media @s-nd {
							display: none;
						}
						> ul.submenu {
							display: none;
							position: absolute;
							max-width: 240px;
							width: max-content;
							background-color: var(--primaryC);
							z-index: 1000;
							border-radius: var(--bdRadius2);
							overflow: hidden;
							box-shadow: var(--shadow1);
							font-size: 0.9em;
							> li {
								> a {
									padding: 12px 12px;
									width: 100%;
									display: block;
									&:hover,
									&:focus {
										background-color: var(--darkTint);
									}
								}
							}
						}
						// reveal submenu on hover or focus
						&:hover,
						&.open {
							> ul.submenu {
								display: block;
							}
						}
					}
				}
			}
		}
	}
</style>
