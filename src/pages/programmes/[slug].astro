---
import singleGQL from '../../api/singleGQL';
import { programmesQuery } from '../../../variables';
import slugify from '../../utils/slugify';
import cleanHTML from '../../utils/cleanHTML';
import PostLayout from '../../layouts/PostLayout.astro';
import { Picture } from '@astrojs/image/components';

export async function getStaticPaths() {
	const programmesData = await singleGQL('programmes', programmesQuery);

	return programmesData.map(programme => ({
		params: { slug: slugify(programme.attributes.name) },
		props: programme,
	}));
}

const strapi_url = import.meta.env.VITE_STRAPI_URL;

const programme = Astro.props;
const {
	attributes: {
		name,
		featuredImage: { data: imageData },
		gallery: { data: galleryData },
		description,
		sections,
		focusAreas: { data: focusAreasData },
		resources: { data: resourcesData },
	},
} = programme;
---

<PostLayout
	title={name}
	image={imageData}
	classes={['programme']}
	tags={focusAreasData}
	{description}>
	<section id='about'>
		<div class='container'>
			{
				sections.map((section, i) => (
					<div
						id={slugify(section.title)}
						class:list={[
							'accordion',
							{ open: i === 0 ? true : false },
						]}>
						<button
							class='button'
							aria-expanded={i === 0 ? 'true' : 'false'}
							aria-controls={`content-${i}`}>
							{section.title}
						</button>
						<div
							class='panel'
							id={`content-${i}`}
							aria-hidden={i === 0 ? 'true' : 'false'}>
							<div
								class='wrapper'
								set:html={cleanHTML(section.content)}
							/>
						</div>
					</div>
				))
			}
			{
				galleryData.length > 0 && (
					<div class='image-gallery'>
						<h2>Image Gallery</h2>
						<div class='scroll-container'>
							{galleryData.map(image => (
								<Picture
									src={strapi_url + image.attributes.url}
									alt={image.attributes.alternativeText || ''}
									widths={[600, 1000]}
									aspectRatio={'3:2'}
								/>
							))}
						</div>
					</div>
				)
			}
		</div>
	</section>
</PostLayout>

<style lang='less'>
	@import '../../styles/variables.less';
	#about {
		.container {
			.accordion {
				max-width: 850px;
				position: relative;
				&::after {
					position: absolute;
					content: '';
					width: 100%;
					height: 2px;
					background-color: var(--accentC1);
					bottom: 0;
					left: 0;
					opacity: 0.2;
				}
				.button {
					font-size: 1.5em;
					color: var(--textC1);
					font-family: var(--fontFamily2);
					font-style: italic;
					font-weight: 700;
					background-color: transparent;
					border: none;
					outline: none;
					padding: 15px 10px;
					width: 100%;
					text-align: left;
					position: relative;
					cursor: pointer;
					&::before {
						position: absolute;
						content: '';
						width: 100%;
						height: 100%;
						background-color: var(--accentC1);
						top: 0;
						left: 0;
						opacity: 0;
						transition: opacity 0.2s ease;
					}
					&:hover,
					&:focus {
						&::before {
							opacity: 0.1;
						}
					}
					&::after {
						position: absolute;
						content: '';
						right: 10px;
						top: 0;
						bottom: 0;
						margin: auto 0;
						width: 35px;
						height: 35px;
						background-image: url('/images/components/nav_button.png');
						background-position: center;
						background-size: contain;
						background-repeat: no-repeat;
						transform: rotate(180deg);
						transition: transform 0.3s ease;
						filter: var(--accentC1Filter);
					}
				}
				&.open {
					.button {
						&::after {
							transform: rotate(270deg);
						}
					}
				}
				.panel {
					visibility: visible;
					overflow: hidden;
					transition:
						height 0.4s ease 0s,
						visibility 0s ease 0s;
					.wrapper {
						padding: 25px 10px;
					}
				}
				&:not(.open) {
					.panel {
						height: 0 !important;
						visibility: hidden;
						transition:
							height 0.4s ease 0s,
							visibility 0s ease 0.4s;
					}
				}
			}
			.image-gallery {
				margin: 75px 0;
				h2 {
					font-size: 1.5em;
					margin-bottom: 30px;
				}
				.scroll-container {
					scroll-behavior: smooth;
					display: grid;
					grid-template-columns: repeat(auto-fit, auto) !important;
					grid-template-rows: 1fr;
					grid-auto-flow: column !important;
					grid-gap: 10px;
					overflow-x: auto;
					overflow-y: hidden;
					padding-left: 150px;
					padding-right: 150px;
					width: calc(100% + 300px);
					transform: translateX(-150px);
					img {
						height: 240px;
						border-radius: var(--bdRadius);
					}
				}
			}
		}
	}
</style>

<style lang='less' is:global>
	.panel {
		.wrapper {
			img {
				border-radius: var(--bdRadius);
				box-shadow: var(--shadow1);
			}
			figure {
				margin: 0;
				img {
					width: 100%;
				}
				figcaption {
					text-align: center;
					width: 90%;
					margin: 0 auto;
				}
			}
		}
	}
</style>

<script>
	const accordions = document.querySelectorAll('.accordion');
	accordions.forEach(accordion => {
		const button = accordion.querySelector('.button') as HTMLButtonElement;
		const panel = accordion.querySelector('.panel') as HTMLElement;
		const images = panel.querySelectorAll('img');

		if (images.length > 0) {
			images.forEach((image, index) => {
				image.addEventListener('load', () => {
					if (index === images.length - 1) {
						panel.style.height = panel.scrollHeight + 'px';
					}
				});
			});
		} else {
			panel.style.height = panel.scrollHeight + 'px';
		}

		button.addEventListener('click', () => {
			accordion.classList.toggle('open');
			const buttonAriaState = button.getAttribute('aria-expanded');
			const panelAriaState = panel.getAttribute('aria-hidden');
			panel.style.height =
				buttonAriaState === 'true' ? '0px' : panel.scrollHeight + 'px';
			button.setAttribute(
				'aria-expanded',
				buttonAriaState === 'true' ? 'false' : 'true'
			);
			panel.setAttribute(
				'aria-hidden',
				panelAriaState === 'true' ? 'false' : 'true'
			);
		});
	});
</script>
